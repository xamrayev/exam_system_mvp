# debug_templates.py - —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
import os
import django
from pathlib import Path

def check_django_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Django"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'exam_system.settings')
    
    try:
        django.setup()
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django: {e}")
        return False

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    BASE_DIR = Path(__file__).resolve().parent
    print(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    
    required_files = {
        'manage.py': BASE_DIR / 'manage.py',
        'settings.py': BASE_DIR / 'exam_system' / 'settings.py',
        'templates/': BASE_DIR / 'templates',
        'templates/base.html': BASE_DIR / 'templates' / 'base.html',
        'templates/exams/': BASE_DIR / 'templates' / 'exams',
        'exams/models.py': BASE_DIR / 'exams' / 'models.py',
    }
    
    for name, path in required_files.items():
        if path.exists():
            print(f"‚úÖ {name}: {path}")
        else:
            print(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢ {name}: {path}")
    
    return BASE_DIR

def check_templates_in_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    try:
        from django.conf import settings
        
        print(f"BASE_DIR: {settings.BASE_DIR}")
        print(f"TEMPLATES –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        
        for i, template_setting in enumerate(settings.TEMPLATES):
            print(f"  –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä {i+1}:")
            print(f"    BACKEND: {template_setting.get('BACKEND')}")
            print(f"    DIRS: {template_setting.get('DIRS')}")
            print(f"    APP_DIRS: {template_setting.get('APP_DIRS')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏–∑ DIRS
        for template_setting in settings.TEMPLATES:
            dirs = template_setting.get('DIRS', [])
            for template_dir in dirs:
                if Path(template_dir).exists():
                    print(f"‚úÖ –ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {template_dir}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    try:
                        files = list(Path(template_dir).rglob('*.html'))
                        print(f"    –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(files)}")
                        for file in files[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"      - {file.relative_to(template_dir)}")
                        if len(files) > 5:
                            print(f"      ... –∏ –µ—â–µ {len(files) - 5}")
                    except Exception as e:
                        print(f"    –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
                else:
                    print(f"‚ùå –ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {template_dir}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def test_template_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    try:
        from django.template.loader import get_template
        from django.template import TemplateDoesNotExist
        
        templates_to_test = [
            'base.html',
            'exams/student_login.html',
            'exams/exam_list.html'
        ]
        
        for template_name in templates_to_test:
            try:
                template = get_template(template_name)
                print(f"‚úÖ {template_name} - –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   –ü—É—Ç—å: {template.origin.name}")
            except TemplateDoesNotExist as e:
                print(f"‚ùå {template_name} - –ù–ï –ù–ê–ô–î–ï–ù")
                print(f"   –û—à–∏–±–∫–∞: {e}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ Django –∏—Å–∫–∞–ª
                if hasattr(e, 'tried'):
                    print("   Django –∏—Å–∫–∞–ª –≤:")
                    for attempt in e.tried:
                        print(f"     - {attempt}")
            except Exception as e:
                print(f"‚ùå {template_name} - –û–®–ò–ë–ö–ê: {e}")
    
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Django template loader: {e}")

def create_missing_templates():
    """–°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã"""
    print("\nüõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    BASE_DIR = Path(__file__).resolve().parent
    templates_dir = BASE_DIR / 'templates'
    exams_templates_dir = templates_dir / 'exams'
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    templates_dir.mkdir(exist_ok=True)
    exams_templates_dir.mkdir(exist_ok=True)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏: {templates_dir}")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏: {exams_templates_dir}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    base_template = templates_dir / 'base.html'
    if not base_template.exists():
        base_content = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}–°–∏—Å—Ç–µ–º–∞ –≠–∫–∑–∞–º–µ–Ω–æ–≤{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }} mt-3">{{ message }}</div>
            {% endfor %}
        {% endif %}
        {% block content %}
        {% endblock %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>'''
        
        base_template.write_text(base_content, encoding='utf-8')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω base.html: {base_template}")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –≤—Ö–æ–¥–∞
    login_template = exams_templates_dir / 'student_login.html'
    if not login_template.exists():
        login_content = '''{% extends 'base.html' %}

{% block title %}–í—Ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞{% endblock %}

{% block content %}
<div class="row justify-content-center mt-5">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">–í—Ö–æ–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h3>
            </div>
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="student_id" class="form-label">–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π ID</label>
                        <input type="text" class="form-control" id="student_id" name="student_id" required>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">–í–æ–π—Ç–∏</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}'''
        
        login_template.write_text(login_content, encoding='utf-8')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω student_login.html: {login_template}")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å–ø–∏—Å–∫–∞ —ç–∫–∑–∞–º–µ–Ω–æ–≤
    exam_list_template = exams_templates_dir / 'exam_list.html'
    if not exam_list_template.exists():
        exam_list_content = '''{% extends 'base.html' %}

{% block title %}–ú–æ–∏ —ç–∫–∑–∞–º–µ–Ω—ã{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã</h2>
        {% if exam_data %}
            {% for data in exam_data %}
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">{{ data.exam.name }}</h5>
                    <p class="card-text">{{ data.exam.description }}</p>
                    {% if data.can_take %}
                        <a href="{% url 'start_exam' data.exam.id %}" class="btn btn-primary">–ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω</a>
                    {% else %}
                        <button class="btn btn-secondary" disabled>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</button>
                    {% endif %}
                </div>
            </div>
            {% endfor %}
        {% else %}
            <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤</p>
        {% endif %}
    </div>
</div>
{% endblock %}'''
        
        exam_list_template.write_text(exam_list_content, encoding='utf-8')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω exam_list.html: {exam_list_template}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    BASE_DIR = check_file_structure()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã
    create_missing_templates()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
    if not check_django_setup():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Django. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ settings.py")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not check_templates_in_settings():
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    test_template_loading()
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
    print("python manage.py runserver")

if __name__ == "__main__":
    main()